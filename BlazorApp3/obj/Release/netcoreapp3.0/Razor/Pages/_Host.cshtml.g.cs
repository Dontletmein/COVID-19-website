#pragma checksum "D:\All_documents\Github\BlazorApp3\COVID-19-website\BlazorApp3\Pages\_Host.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8e2e54bf9651481a9d289eba55377fed7ea1911a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BlazorApp3.Pages.Pages__Host), @"mvc.1.0.razor-page", @"/Pages/_Host.cshtml")]
namespace BlazorApp3.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "/")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8e2e54bf9651481a9d289eba55377fed7ea1911a", @"/Pages/_Host.cshtml")]
    public class Pages__Host : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8e2e54bf9651481a9d289eba55377fed7ea1911a3320", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>NZ Covid19</title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("base", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8e2e54bf9651481a9d289eba55377fed7ea1911a3733", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <link rel=\"stylesheet\" href=\"css/bootstrap/bootstrap.min.css\" />\r\n    <link href=\"css/site.css\" rel=\"stylesheet\" />\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8e2e54bf9651481a9d289eba55377fed7ea1911a5661", async() => {
                WriteLiteral("\r\n    <app>\r\n        ");
#nullable restore
#line 17 "D:\All_documents\Github\BlazorApp3\COVID-19-website\BlazorApp3\Pages\_Host.cshtml"
    Write(await Html.RenderComponentAsync<App>(RenderMode.ServerPrerendered));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
    </app>

    <script src=""_framework/blazor.server.js""></script>

    <!-- Reference the included moment.js javascript file. -->
    <script src=""_content/ChartJs.Blazor/moment-with-locales.min.js"" type=""text/javascript"" language=""javascript""></script>

    <!-- Reference the included ChartJs javascript file. -->
    <script src=""_content/ChartJs.Blazor/Chart.min.js"" type=""text/javascript"" language=""javascript""></script>

    <!-- This is the glue between the C# code and the ChartJs charts -->
    <script src=""_content/ChartJs.Blazor/ChartJsBlazorInterop.js"" type=""text/javascript"" language=""javascript""></script>

    <script src=""https://code.jquery.com/jquery-3.5.0.min.js""></script>

    <script src='http://www.bing.com/api/maps/mapcontrol?key=Aim3O3iwKByoB8i41aGn0VjUEn_I9jCOb43wRIXE7Dsi6LW-8CCQIqI2Ao8mcC5K'></script>



    <!-- Some styling -->
    <link rel=""stylesheet"" href=""_content/ChartJs.Blazor/ChartJSBlazor.css"" />


    <script>

        var map, infobox;
        func");
                WriteLiteral(@"tion showNZcovid19Locations(locationsUri) {
            console.log(locationsUri);

            $.ajax({
                url: locationsUri,
                type: ""GET"",
                success: function (result) {
                    var c19CasesData = JSON.parse(result);
                    console.log(c19CasesData);

                    var initLocations = initLocationData();
                    console.log(initLocations);

                    createLocationsForMap(initLocations, c19CasesData);
                },
                error: function (error) {
                    console.log(error)
                }
            });
        }

        function initLocationData() {
            var locations = new Array();
            locations[0] = { latitude: -36.8567678, longitude: 174.7683987, LocationName: 'Auckland', CaseCount: 0 };
            locations[1] = { latitude: -37.7570993, longitude: 175.5057939, LocationName: 'Bay of Plenty', CaseCount: 0 };
            locations[2] = { lat");
                WriteLiteral(@"itude: -44.5233973, longitude: 170.437046, LocationName: 'Canterbury', CaseCount: 0 };
            locations[3] = { latitude: -41.4552384, longitude: 174.8326879, LocationName: 'Capital and Coast', CaseCount: 0 };
            locations[4] = { latitude: 37.1778371, longitude: 174.666809, LocationName: 'Counties Manukau', CaseCount: 0 };
            locations[5] = { latitude: 39.5916957, longitude: 176.2674083, LocationName: ""Hawke's Bay"", CaseCount: 0 };
            locations[6] = { latitude: -41.2205354, longitude: 174.7096547, LocationName: 'Hutt Valley', CaseCount: 0 };
            locations[7] = { latitude: -41.1877747, longitude: 174.1731032, LocationName: 'Lakes', CaseCount: 0 };
            locations[8] = { latitude: -40.3450607, longitude: 175.6234371, LocationName: 'MidCentral', CaseCount: 0 };

            return locations;
        }

        function createLocationsForMap(locationsData, c19CasesData) {
            map = new Microsoft.Maps.Map('#map', {
                credentials: 'Aim3");
                WriteLiteral(@"O3iwKByoB8i41aGn0VjUEn_I9jCOb43wRIXE7Dsi6LW-8CCQIqI2Ao8mcC5K',
                center: { latitude: -36.8567678, longitude: 174.7683987 }
            });

            //Create an infobox at the center of the map but don't show it.
            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
                visible: false
            });

            //Assign the infobox to a map instance.
            infobox.setMap(map);


            var totalCount = 0;
            for (var i = 0; i < locationsData.length; i++) {

                locationsData[i].CaseCount = c19CasesData[locationsData[i].LocationName].CaseCount;
                totalCount += locationsData[i].CaseCount;

                var pinText = (locationsData[i].LocationName + "" CaseCount:"" + locationsData[i].CaseCount);

                var pin = new Microsoft.Maps.Pushpin(locationsData[i], {
                    color: 'blue',
                    text: (locationsData[i].CaseCount + '')
                });

              ");
                WriteLiteral(@"  //Store some metadata with the pushpin.
                pin.metadata = {
                    title: locationsData[i].LocationName,
                    description: pinText
                };

                //Add a click event handler to the pushpin.
                Microsoft.Maps.Events.addHandler(pin, 'click', pushpinClicked);

                //Add pushpin to the map.
                map.entities.push(pin);
            }

            $(""#Refresh"").text(""Total Cases:"" + totalCount + "" (Refresh)"");

        }


        function pushpinClicked(e) {
            //Make sure the infobox has metadata to display.
            if (e.target.metadata) {

                //Set the infobox options with the metadata of the pushpin.
                infobox.setOptions({
                    location: e.target.getLocation(),
                    title: e.target.metadata.title,
                    description: e.target.metadata.description,
                    visible: true
                });
 ");
                WriteLiteral(@"           }
        }

        function showInfoboxByKey(Key) {

            //Look up the  pushpin by gridKey.
            var selectedPin = map.entities.get(gridKey);

            //Show an infobox for the cluster or pushpin.
            Microsoft.Maps.Events.invoke(selectedPin, ""click"");
        }


    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages__Host> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages__Host> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages__Host>)PageContext?.ViewData;
        public Pages__Host Model => ViewData.Model;
    }
}
#pragma warning restore 1591
